/**
  ******************************************************************************
  * File Name          : main.c
  * Date               : 20/09/2014 15:15:57
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2014 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "stm32f2xx_hal.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
#include "dynamixel.h"
#include "IO_Data.h"
#include "MPU6050.h"

#define SRAM_BANK_ADDR                 ((uint32_t)0x64000000)
/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

TIM_HandleTypeDef htim12;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

SRAM_HandleTypeDef hsram1;
NAND_HandleTypeDef hnand1;

/* USER CODE BEGIN 0 */
uint8_t tucString[]="hello world\n";
/* USER CODE END 0 */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_DCMI_Init(void);
static void MX_FSMC_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM12_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USART6_UART_Init(void);
 unsigned char tucBuffer[256];
int main(void)
{

  /* USER CODE BEGIN 1 */

  unsigned char ucError, ucData, ucCount , ucStep=0;
  unsigned int uiTargetPos,uiDataAdc,uiLastAdc=0, uiDataAdc2,uiLastAdc2=0;
  unsigned int uiLastPos,uiLastPos2;
  volatile unsigned char *pSramData = (unsigned char *)SRAM_BANK_ADDR;
  uint16_t uiSpeed;
  uint32_t uiTickRef;
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* System interrupt init*/
  /* Sets the priority grouping field */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
//  MX_DMA_Init();
    MX_ADC1_Init();
//  MX_DCMI_Init();
  MX_FSMC_Init();
  MX_I2C1_Init();
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
//  MX_USART2_UART_Init();
//  MX_USART3_UART_Init();
//  MX_USART6_UART_Init();
//  MX_USB_DEVICE_Init();
//	MX_TIM12_Init();


	IO_Data_init();


 // MPU6050_Test();

  /* USER CODE END 2 */
  HAL_Delay(250);
  uiTargetPos = 512;
  tucBuffer[0]=(unsigned char)uiTargetPos;
  tucBuffer[1]=(unsigned char)(uiTargetPos>>8);
  Dynamixel_Write_Data_Send(1,32,2,tucBuffer);
  HAL_Delay(500);
  uiTickRef = HAL_GetTick();
  uiSpeed = 10;
  /* Infinite loop */
  while (1)
  {

  	while( HAL_GetTick() - uiTickRef < 10 );

  	uiTickRef = HAL_GetTick();
  	IO_Data_Scan_In();
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6, GPIO_PIN_SET );
  	/*switch(ucStep)
  	{
  		case 0:
	  		uiSpeed+=50;
	  		if( uiSpeed < 512 )
	  		{
		  		IO_SERVO_MOVING_SPEED_SET( 0, uiSpeed );
		  		IO_SERVO_MOVING_SPEED_SET( 1, uiSpeed );
		  		ucStep++;
		  	}
		  	else
		  	ucStep=3;
  		case 1:
			if( IO_SERVO_MOVING(0) || IO_SERVO_MOVING(1) )
				break;
  			IO_SERVO_GOAL_POSITION_SET( 0, 650 );
		  	IO_SERVO_GOAL_POSITION_SET( 1, 650 );
		  	ucStep++;
		  	break;
		case 2:
			if( IO_SERVO_MOVING(0) || IO_SERVO_MOVING(1) )
				break;
			IO_SERVO_GOAL_POSITION_SET( 0, 400 );
		  	IO_SERVO_GOAL_POSITION_SET( 1, 400 );
		  	ucStep=0;
		default:
		 	break;
	}*/
	uiDataAdc = IO_Data_Adc_Get( 1) ;
	if( uiLastAdc != uiDataAdc )
	{
		uiLastAdc = uiDataAdc;
		if( uiLastAdc < 2000 )
		{
		 	IO_SERVO_GOAL_POSITION_SET(0 , 100 );
		 	IO_SERVO_MOVING_SPEED_SET( 0, (2048-uiLastAdc)/4 );
		 	uiLastPos=0xffff;
		}
		else if( uiLastAdc > 2096 )
		{
			IO_SERVO_GOAL_POSITION_SET(0 , 924 );
		 	IO_SERVO_MOVING_SPEED_SET( 0, (uiLastAdc-2048)/4 );
		 	uiLastPos=0xffff;
		}
		else
		{
			if( uiLastPos == 0xFFFF)
			{
				IO_SERVO_MOVING_SPEED_SET( 0, 20 );
				uiLastPos=0xfffe;
			}
			else if(uiLastPos == 0xFFFE && IO_SERVO_PRESENT_SPEED_GET(0) < 30)
			{
				uiLastPos = IO_SERVO_PRESENT_POSITION_GET(0);
				IO_SERVO_GOAL_POSITION_SET(0 , uiLastPos );
				
			}
		}
	}
	uiDataAdc2 = IO_Data_Adc_Get( 0 ) ;
	if( uiLastAdc2 != uiDataAdc2 )
	{
		uiLastAdc2 = uiDataAdc2;
		if( uiLastAdc2 < 2000 )
		{
		 	IO_SERVO_GOAL_POSITION_SET(1 , 100 );
		 	IO_SERVO_MOVING_SPEED_SET( 1, (2048-uiLastAdc2)/8 );
		 	uiLastPos2 = 0xffff;
		 	
		}
		else if( uiLastAdc2 > 2096 )
		{
			IO_SERVO_GOAL_POSITION_SET(1 , 924 );
		 	IO_SERVO_MOVING_SPEED_SET( 1, (uiLastAdc2-2048)/8 );
		 	uiLastPos2 = 0xffff;
		}
		else
		{
			if( uiLastPos2 == 0xffff )
			{
				IO_SERVO_MOVING_SPEED_SET( 1 , 20 );
				uiLastPos2 = 0xfffe ;
			}
			else if( uiLastPos2 == 0xfffe && IO_SERVO_PRESENT_SPEED_GET(1) < 30)
			{
				uiLastPos2 = IO_SERVO_PRESENT_POSITION_GET(1);
				IO_SERVO_GOAL_POSITION_SET(1 , uiLastPos2 );
			}
		}
	}
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6, GPIO_PIN_RESET );
  	IO_Data_Scan_Out();

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);

}

/* ADC1 init function */
void MX_ADC1_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler 		= ADC_CLOCKPRESCALER_PCLK_DIV2;
  hadc1.Init.Resolution 		= ADC_RESOLUTION12b;
  hadc1.Init.ScanConvMode 		= DISABLE;
  hadc1.Init.ContinuousConvMode 	= DISABLE;
  hadc1.Init.DiscontinuousConvMode 	= DISABLE;
  hadc1.Init.NbrOfDiscConversion 	= 1;
  hadc1.Init.ExternalTrigConvEdge 	= ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DataAlign 			= ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion 		= 1;
  hadc1.Init.DMAContinuousRequests 	= DISABLE;
  hadc1.Init.EOCSelection 		= EOC_SINGLE_CONV;
  HAL_ADC_Init(&hadc1);

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

}

/* DCMI init function */
void MX_DCMI_Init(void)
{

  hdcmi.Instance = DCMI;
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_EMBEDDED;
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
  hdcmi.Init.SyncroCode.FrameEndCode = 0;
  hdcmi.Init.SyncroCode.FrameStartCode = 0;
  hdcmi.Init.SyncroCode.LineStartCode = 0;
  hdcmi.Init.SyncroCode.LineEndCode = 0;
  HAL_DCMI_Init(&hdcmi);

}

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance->CR1 |= I2C_CR1_SWRST;
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
  if(HAL_I2C_Init(&hi2c1) != HAL_OK)
	hi2c1.Init.ClockSpeed = 400001;
  else
	hi2c1.Init.ClockSpeed = 400000;



}

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_SLAVE;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
  HAL_SPI_Init(&hspi1);

}

/* TIM12 init function */
void MX_TIM12_Init(void)
{

  TIM_OC_InitTypeDef sConfigOC;

  htim12.Instance = TIM12;
  htim12.Init.Prescaler = 32768;
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim12.Init.Period = 32;
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_PWM_Init(&htim12);

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 16;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1);

  //HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2);

}

/* USART1 init function */
void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 1000000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_HalfDuplex_Init(&huart1);

}

/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 1000000;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_HalfDuplex_Init(&huart2);

}

/* USART3 init function */
void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 1000000;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_HalfDuplex_Init(&huart3);

}

/* USART6 init function */
void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
  huart6.Init.BaudRate = 1000000;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_HalfDuplex_Init(&huart6);

}

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* Sets the priority grouping field */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOE_CLK_ENABLE();
  __GPIOF_CLK_ENABLE();
  __GPIOH_CLK_ENABLE();
  __GPIOA_CLK_ENABLE();
  __GPIOG_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOC_CLK_ENABLE();

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : PF7 PF8 PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

}

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
  FSMC_NORSRAM_TimingTypeDef Timing;
  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming;
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming;

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
  /* hsram1.Init */
  hsram1.Init.NSBank 		= FSMC_NORSRAM_BANK2;
  hsram1.Init.DataAddressMux 	= FSMC_DATA_ADDRESS_MUX_DISABLE;
  hsram1.Init.MemoryType 	= FSMC_MEMORY_TYPE_SRAM;
  hsram1.Init.MemoryDataWidth 	= FSMC_NORSRAM_MEM_BUS_WIDTH_16;
  hsram1.Init.BurstAccessMode 	= FSMC_BURST_ACCESS_MODE_DISABLE;
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
  hsram1.Init.WrapMode 		= FSMC_WRAP_MODE_DISABLE;
  hsram1.Init.WaitSignalActive 	= FSMC_WAIT_TIMING_BEFORE_WS;
  hsram1.Init.WriteOperation 	= FSMC_WRITE_OPERATION_ENABLE;
  hsram1.Init.WaitSignal 	= FSMC_WAIT_SIGNAL_DISABLE;
  hsram1.Init.ExtendedMode 	= FSMC_EXTENDED_MODE_DISABLE;
  hsram1.Init.AsynchronousWait 	= FSMC_ASYNCHRONOUS_WAIT_ENABLE;
  hsram1.Init.WriteBurst 	= FSMC_WRITE_BURST_DISABLE;

  /* Timing */
  Timing.AddressSetupTime = 5;
  Timing.AddressHoldTime  = 5;
  Timing.DataSetupTime    = 5;
  Timing.BusTurnAroundDuration = 5;
  Timing.CLKDivision = 5;
  Timing.DataLatency = 5;
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
/*  Timing.AddressSetupTime = 15;
  Timing.AddressHoldTime  = 15;
  Timing.DataSetupTime    = 255;
  Timing.BusTurnAroundDuration = 15;
  Timing.CLKDivision = 16;
  Timing.DataLatency = 17;
  Timing.AccessMode = FSMC_ACCESS_MODE_A;*/
 /* Timing.AddressSetupTime       = 2;
  Timing.AddressHoldTime        = 1;
  Timing.DataSetupTime          = 2;
  Timing.BusTurnAroundDuration  = 1;
  Timing.CLKDivision            = 2;
  Timing.DataLatency            = 2;
  Timing.AccessMode             = FSMC_ACCESS_MODE_A;*/
  /* ExtTiming */

  HAL_SRAM_Init(&hsram1, &Timing, NULL);
#if 0
  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
  hnand1.Init.TCLRSetupTime = 0;
  hnand1.Init.TARSetupTime = 0;
  /* hnand1.Info */
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 255;
  ComSpaceTiming.WaitSetupTime = 255;
  ComSpaceTiming.HoldSetupTime = 255;
  ComSpaceTiming.HiZSetupTime = 255;
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 255;
  AttSpaceTiming.WaitSetupTime = 255;
  AttSpaceTiming.HoldSetupTime = 255;
  AttSpaceTiming.HiZSetupTime = 255;

  HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming);
#endif
}

/* USER CODE BEGIN 4 */
caddr_t _sbrk_r ( int incr )
{

	return NULL;
} 
/* USER CODE END 4 */

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  volatile int iCpt=0;
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
	while(1)
	iCpt++;

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
