#include "string.h"
#include "stm32f2xx_hal.h"
#include "MPU6050.h"
#include "MPU6050_reg.h"

#define MPU6050_ADDR (0x69<<1)

#define SHELL_TASK_INIT(State)        switch( State ) { case 0:
#define SHELL_TASK_END(State)        State=0; default: State=0;}
#define SHELL_TASK_YELD(State)        \
        iShellState = __LINE__; \
        return;                    \
        case __LINE__:

#define SHELL_TASK_DELAY( State , nb_ms )                    \
        iShellDelayInit= HAL_GetTick();             \
        iShellState = __LINE__;                     \
        return;                                        \
        case __LINE__:                                 \
        if((HAL_GetTick()-iShellDelayInit) < nb_ms) \
            return;
#define SHELL_PRINTF( ... ) do  {dprintf(__VA_ARGS__); \
                            SHELL_TASK_DELAY(2) } while(0)
int iShellState=0;
int iShellDelayInit=0;

extern I2C_HandleTypeDef hi2c1;


HAL_StatusTypeDef MPU6050_Read_Byte( uint8_t ucAddress , uint8_t *pucData )
{
	HAL_StatusTypeDef Status;

	//Status = HAL_I2C_Master_Transmit( &hi2c1 , MPU6050_ADDR , &ucAddress , 1 , 10 );
	Status = HAL_I2C_Master_Transmit_IT( &hi2c1 , MPU6050_ADDR , &ucAddress , 1 );

	if( Status == HAL_OK )
	{
		while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
		;
		//Status = HAL_I2C_Master_Receive( &hi2c1 , MPU6050_ADDR , pucData, 1 , 10 );
		Status = HAL_I2C_Master_Receive_IT( &hi2c1 , MPU6050_ADDR , pucData, 1 );
		while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
		;

	}
	
	return Status;
}

HAL_StatusTypeDef MPU6050_Read_Word( uint8_t ucAddress , uint16_t *puiData )
{
	HAL_StatusTypeDef Status;
	uint8_t tucBuffer[2];

	Status = HAL_I2C_Master_Transmit( &hi2c1 , MPU6050_ADDR , &ucAddress , 1 , 10 );

	if( Status == HAL_OK )
	{
		Status = HAL_I2C_Master_Receive( &hi2c1 , MPU6050_ADDR , tucBuffer, 2 , 10 );
		*puiData = ((int16_t)tucBuffer[1]);
		*puiData += ((int16_t)tucBuffer[0])*256;
	}
	
	return Status;
}

HAL_StatusTypeDef MPU6050_Write_Byte( uint8_t ucAddress , uint8_t ucData )
{
	HAL_StatusTypeDef Status;
	uint8_t tucBuffer[2] = { ucAddress , ucData };

	Status = HAL_I2C_Master_Transmit( &hi2c1 , MPU6050_ADDR , tucBuffer , 2 , 10 );
	
	return Status;
}

uint8_t MPU6050_Init( void )
{
	HAL_StatusTypeDef Status;
	uint8_t ucData;
	uint16_t uiAxel_X,uiAxel_Y,uiAxel_Z;

	Status = MPU6050_Read_Byte(  MPU6050_REG_PWR_MGMT_1 , &ucData);	
	Status = MPU6050_Write_Byte( MPU6050_REG_PWR_MGMT_1 , 0x02 );
	Status = MPU6050_Read_Byte(  MPU6050_REG_PWR_MGMT_1 , &ucData);	
	Status = MPU6050_Write_Byte( MPU6050_REG_SMPLRT_DIV , 0x07 );
	Status = MPU6050_Write_Byte( MPU6050_REG_GYRO_CONFIG , 0x08 );
	Status = MPU6050_Read_Byte(  MPU6050_REG_SMPLRT_DIV , &ucData);	
	while(1)
	{
		Status = MPU6050_Read_Word(  MPU6050_REG_ACCEL_XOUT_H , &uiAxel_X);
		Status = MPU6050_Read_Word(  MPU6050_REG_ACCEL_YOUT_H , &uiAxel_Y);
		Status = MPU6050_Read_Word(  MPU6050_REG_ACCEL_ZOUT_H , &uiAxel_Z);
		Status = 0;

	}
	ucData=0;
	return 0;
}


uint8_t MPU6050_Test( void )
{
	uint8_t ucData , ucReturn=1;
	uint32_t uiCR1,uiCR2,uiSR1,uiSR2;
	uint32_t uiB8,uiB7;

	HAL_StatusTypeDef Status;

	MPU6050_Init();
	do 
	{
		ucData = MPU6050_REG_WHO_AM_I;
		Status = HAL_I2C_Master_Transmit( &hi2c1 , 0x69<<1 , &ucData , 1 , 10 );
		if( Status == HAL_OK )
		{
			Status = HAL_I2C_Master_Receive( &hi2c1 , 0x69<<1 , &ucData , 1 , 10 );
			if( Status == HAL_OK )
				ucReturn= 0;	
			else
				ucReturn= 1;
		} 
		else
		{
			//hi2c1.Instance->CR1 |= I2C_CR1_START;
			ucReturn= 1;
		}
	}
	while(ucReturn);

	return ucReturn;
}


