#include <string.h>
#include "stm32f2xx_hal.h"

#define STATE_IDLE      0
#define STATE_TX        1
#define STATE_WAITRX    2
#define STATE_RX_READ   3
#define STATE_RX_RESULT 4

#define RX_INDEX_ID     2
#define RX_INDEX_LENGTH 3
#define RX_INDEX_ERROR  4
#define RX_INDEX_PARAM  5


#define TX_BUFER_SIZE 256
#define RX_BUFER_SIZE 256

/* INTRUCTION */
#define INSTRUCTION_PING        0x01
#define INSTRUCTION_READ_DATA   0x02
#define INSTRUCTION_WRITE_DATA  0x03

extern UART_HandleTypeDef huart1;
static unsigned char tucCommandBuffer[256];
static unsigned char tucTxBuffer[TX_BUFER_SIZE];
static unsigned char ucTXindex;
static unsigned char ucTXLength;
static unsigned char ucRXindex;
static unsigned char ucRXLength;
static unsigned char tucRxBuffer[RX_BUFER_SIZE];
static unsigned char ucState=0;
static unsigned char *pucCommandParams;

unsigned char Dynamixel_Send_Data_Buffer( unsigned char ucId , unsigned char ucInstruction , unsigned char ucLength, unsigned char *pucData )
{
    unsigned char *pucBuffer = &tucTxBuffer[0];
    unsigned char ucCeckSum=0;
    
    
    if( ucState != STATE_IDLE )
        return 1;
  
    HAL_HalfDuplex_EnableTransmitter( &huart1 );  
    ucTXindex = 0;
    ucTXLength = ucLength+6;
        
    *(pucBuffer++) = 0xff;
    *(pucBuffer++) = 0xff;
    *(pucBuffer++) = ucId;
    ucCeckSum = ucId;
    *(pucBuffer++) =ucLength+2;
    ucCeckSum += ucLength+2;
    *(pucBuffer++) =ucInstruction;
    ucCeckSum += ucInstruction;
    while( ucLength  )
    {
        ucCeckSum += *pucData;
        *(pucBuffer++) = *(pucData++);
        ucLength--;
    }
    *(pucBuffer++) = ~ucCeckSum;
    ucState = STATE_TX;
    HAL_UART_Transmit_IT(&huart1 ,tucTxBuffer,ucTXLength);
    return 0;
}

unsigned char Dynamixel_Send_Data_2Bytes( unsigned char ucId , unsigned char ucInstruction ,  unsigned char ucData1 ,  unsigned char ucData2  )
{
    unsigned char *pucBuffer = &tucTxBuffer[0];
    unsigned char ucCeckSum=0;
    
    
    if( ucState != STATE_IDLE )
        return 1;
    
    ucTXindex = 0;
    ucTXLength = 8;
        
    *(pucBuffer++) = 0xff;
    *(pucBuffer++) = 0xff;
    *(pucBuffer++) = ucId;
    ucCeckSum = ucId;
    *(pucBuffer++) =4;
    ucCeckSum += 4;
    *(pucBuffer++) =ucInstruction;
    ucCeckSum += ucInstruction;
    *(pucBuffer++) =ucData1;
    ucCeckSum += ucData1;
    *(pucBuffer++) =ucData2;
    ucCeckSum += ucData2;
    *(pucBuffer++) = ~ucCeckSum;
    ucState = STATE_TX;
    HAL_UART_Transmit_IT(&huart1 ,tucTxBuffer,ucTXLength);
    return 0;
}

unsigned char Dynamixel_Busy( void )
{
   if( ucState != STATE_RX_RESULT)
		return 1;
	ucState = STATE_IDLE;
	return 0;
}

void Dynamixel_Read_Data_Send( unsigned char ucId , unsigned char ucAddress , unsigned char ucLength  )
{
      memset(tucRxBuffer,0xff,RX_BUFER_SIZE);
      ucState = STATE_IDLE;
      Dynamixel_Send_Data_2Bytes( ucId , INSTRUCTION_READ_DATA , ucAddress , ucLength );
      ucRXindex = 0;
      ucRXLength = 6 + ucLength;
}

unsigned char Dynamixel_Read_Data_Result( unsigned char *pucError ,  unsigned char *pucData )
{
    if( ucState != STATE_RX_RESULT )
        return 1;
    
    //pucData =pucCommandParams;
    memcpy(pucData,pucCommandParams,ucRXLength-6);
    ucState = STATE_IDLE;
    *pucError = 0xff;
    return 0;
}



void Dynamixel_Write_Data_Send( unsigned char ucId , unsigned char ucAddress , unsigned char ucLength   , unsigned char *pucData)
{
      unsigned char ucIndex=0;
     
      ucState = STATE_IDLE;
      tucCommandBuffer[0] = ucAddress;
      for( ucIndex = 1; ucIndex <ucLength+1 ; ucIndex++ )
          tucCommandBuffer[ ucIndex ] = *(pucData++);
      
      Dynamixel_Send_Data_Buffer( ucId , INSTRUCTION_WRITE_DATA , ucLength+1 , tucCommandBuffer );
      ucRXindex = 0;
      ucRXLength = 6 ;
}


void Dynamixel_Ping_Send( unsigned char ucId )
{
    Dynamixel_Send_Data_Buffer( ucId , INSTRUCTION_PING , 0 , (unsigned char *) 0 );
    ucRXindex = 0;
    ucRXLength = 6;
    
}

unsigned char Dynamixel_Ping_Result( unsigned char *pucError )
{
    if( ucState != STATE_RX_RESULT)
        return 1;
    
    ucState = STATE_IDLE;
    *pucError = 0xff;
    return 0;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6, GPIO_PIN_SET );
  pucCommandParams = &(tucRxBuffer[RX_INDEX_PARAM]);
  ucState = STATE_RX_RESULT;
  HAL_HalfDuplex_EnableTransmitter( &huart1 );
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6, GPIO_PIN_SET );
  HAL_HalfDuplex_EnableReceiver( &huart1 );
  HAL_UART_Receive_IT( &huart1 , tucRxBuffer , ucRXLength);
  ucState = STATE_RX_READ;
}


